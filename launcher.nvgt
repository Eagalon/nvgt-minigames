// The actual launcher of this project. Written by Garo at the 15th june 2024 and last updated by Garo at the 15th june 2024. Thanks to Harry Min Khant for the custom menu include as well as examples and sounds.
#include"form.nvgt"
#include"includes/*.nvgt"
audio_form f;
custom_menu m;
string time;
string d_log="Debug log started. "+TIME_HOUR+":"+TIME_MINUTE+":"+TIME_SECOND+".\r\n";
bool debugging=true;
bool exe=false;
scriptprogram@[] programs(0);
script_detect scripting;
void main()
{
add_program("Blackjack","blackjack/source/bj");
add_program("Guess The Number","guess_the_number/guess_the_number");
add_program("Number Sort","number_sort/game");
add_program("Documentation","documentation");
if(debugging) d_log+="Starting. "+get_time_stuff()+".\r\n";
if(SCRIPT_COMPILED)
{
exe=true;
if(debugging==true) d_log+="Script is running on exe. "+get_time_stuff()+".\r\n";
}
else
{
if(exe==true) exe=false;
if(debugging==true) d_log+="Script is running from source. "+get_time_stuff()+".\r\n";
}
if(debugging==true) d_log+="Startup completed. Loading menu... "+get_time_stuff()+".\r\n";
show_window("Launcher");
mainmenu();
}
void mainmenu()
{
m.reset(true);
m.clicksound="sounds/menuclick.ogg";
m.movesound="sounds/menumove.ogg";
m.opensound="sounds/menuopen.ogg";
m.wrapsound="sounds/menuwrap.ogg";
m.edgesound="sounds/menuedge.ogg";
for(uint i=0;i<programs.length();i++)
{
m.add("Run "+programs[i].name,programs[i].name);
}
m.add("Visit the repository online","repository");
if(debugging==true) m.add("Get the debug log.","debug");
m.add("Exit","exit");
m.create("Main menu");
if(debugging==true) d_log+="Menu successfully loaded. "+get_time_stuff()+".\r\n";
while(m.running)
{
wait(5);
m.monitor();
string r=m.click;
if(r!="" && get_program_index(r)>-1)
{
int index=get_program_index(r);
string final_name=programs[index].value+"."+(exe?"exe":"nvgt");
scripting.name=final_name;
bool suc=scripting.execute();
string sucmsg=(suc?programs[index].name+" has been executed.":"Failed to execute"+programs[index].name);
speak(sucmsg);
if(debugging) d_log+=sucmsg+". "+get_time_stuff()+".\r\n";
break;
}
else if(m.is_clicked("repository"))
{
speak("Loading...");
urlopen("https://github.com/garo-pro/nvgt-minigames/");
if(debugging==true) d_log+="URL https://github.com/garo-pro/nvgt-minigames/ loaded. "+get_time_stuff()+".\r\n";
}
else if(m.is_clicked("debug"))
{
m.reset();
dlg("Press enter to view the debug log.");
speak("Viewing debug log...");
if(debugging==true) d_log+="Viewing debug log... "+get_time_stuff()+".\r\n";
debugmenu();
}
else if(m.is_clicked("exit"))
{
break;
}
}
speak("Thank you for using");
if(debugging==true)
{
clipboard_set_text(d_log);
speak("Information! Debug log copied to clipboard.");
}
exit();
}
void debugmenu()
{
f.reset();
f.create_window("Debug log viewer",false);
wait(250);
int debug_log=f.create_input_box("Debug log.",d_log,"",0,true,true,true);
f.focus(debug_log);
int close=f.create_button("Close",false,true);
while(true)
{
wait(5);
f.monitor();
if(f.is_pressed(close))
{
f.reset();
mainmenu();
}
}
}
class scriptprogram
{
string name, value;
scriptprogram(string name1, string value2)
{
this.name=name1;
this.value=value2;
}
}
void add_program(string name, string value)
{
scriptprogram s1(name, value);
programs.insert_last(s1);
}
int get_program_index(string name)
{
if(programs.length()<1) return -1;
for(uint i=0;i<programs.length();i++)
{
if(programs[i].name==name) return i;
}
return -1;
}